# -*- coding: utf-8 -*-
"""Adjective_extract.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VcCtNJ42MBwXZtBlfL-N9KOqWfzt4A7i
"""

import pandas as pd
import json
import numpy as np
import random
import nltk
import math
import spacy
import re
nlp = spacy.load("en_core_web_sm")
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
pd.set_option('display.max_rows', None)

from google.colab import drive
drive.mount('/content/drive')

# load data 
data_file = open("/content/drive/MyDrive/yelp_academic_dataset_review.json")
data = []
for line in data_file:
  data.append(json.loads(line))
df = pd.DataFrame(data)
data_file.close()

# extract business_id
series_id_total = df['business_id']
series_id_once = series_id_total.drop_duplicates()

# select a business b1 randomly
r = random.randint(0, len(series_id_once)-1)
b1 = df.loc[r, "business_id"]
print("business id is " + b1)
df_b1_related = df[df['business_id'] == b1]
reviews_selected = df_b1_related['text'].tolist()

def get_AP_from_tree(tree, tokens):
  adj_phrase = []
  st = 0
  for subtree in tree:
    if isinstance(subtree, nltk.tree.Tree):
      if subtree.label() == 'AP':
        ed = st + len(subtree.leaves())
        if(ed-st > 1):        
          for i in range(st,ed-1):
            adj_phrase.append(tokens[i]+" "+tokens[i+1])
        else:
          adj_phrase.append(tokens[st])    
      st += len(subtree.leaves())
    else:
      st += 1
  return adj_phrase

def extract_adj_phrase(review):
  doc = nlp(review)
  tagged = []
  tokens = []
  for token in doc:
    if(token.text == '\n'):
      continue
    _token = token.text.lower()
    _tag = (_token, token.tag_)
    tagged.append(_tag)
    tokens.append(_token)

  grammar = r"""
    AP: {<RB><JJ|JJR|JJS><IN|TO><DT>?<NN|NNS|NNP|NNPS>}
      {<JJ|JJR|JJS><IN|TO><DT>?<NN|NNS|NNP|NNPS>}
      {<RB>?<JJ|JJR|JJS>}
  """
  cp = nltk.RegexpParser(grammar)
  tree = cp.parse(tagged)
  return get_AP_from_tree(tree, tokens)

# extract adjective phrases form the reviews of business b1
adj_phrases = []
adj_selected = []
for review in reviews_selected:
  adj_phrases += extract_adj_phrase(review)

_count = pd.value_counts(adj_phrases)
adj_selected_count = _count[0:min(len(_count),50)]
print(adj_selected_count)

adj_selected = adj_selected_count.index.tolist()
adj_sampled_count = pd.Series([0]*len(adj_selected), index = adj_selected)
adj_score = pd.Series([0.0]*len(adj_selected), index = adj_selected)

# count the frequency of adjective phrase in sampled reviews 
sample_num = 20000

reviews_total_series = df['text']
reviews_sampled = reviews_total_series.sample(sample_num).tolist()

adj_sampled = []
for review in reviews_sampled:
  _adj_phrases = extract_adj_phrase(review)
  for phrase in _adj_phrases:
    if phrase in adj_selected:
      adj_sampled_count[phrase] += 1

print(adj_sampled_count)

# calculate the scores of adjective phrases
for index in adj_selected:
  p_b1 = adj_selected_count[index] / float(len(reviews_selected))
  p_C = adj_sampled_count[index] / float(sample_num)
  if(p_C != 0):
    adj_score[index] = p_b1 * math.log(p_b1/p_C) 
  else:
    adj_score[index] = -100
print("Indicative adjective phrases and their scores are as follows:")
display(adj_score.sort_values(ascending = False)[0:10])